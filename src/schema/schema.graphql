#Storefront schema begin
type Menu {
    id: ID!
    items: [MenuItem!]!
}

type MenuItem {
    id: ID!
    name: String!
    price: Int!
}

type CouponCodeItem {
    id: ID!
    type: String!
    value: Int!
    code: String!
}

type Storefront {
    id: ID!
    menu: Menu!
    address: String!
    name: String!
    imageUrl: String!
    zipCodes: [String!]!
    couponCodes: [String!]!
}

type Query {
    storefronts: [Storefront!]!
}

input GetStorefrontByArea {
    zipCode: String!
}

type Query {
    getStorefrontByArea(input: GetStorefrontByArea!): [Storefront!]!
}

input GetStorefrontMenu {
    id: ID!
}

type Query {
    getStorefrontMenu(input: GetStorefrontMenu!): Storefront!
}

input NewStorefront {
    address: String!
    name: String!
    imageUrl: String!
    menuId: String!
    zipCodes: [String!]!
    supportedCouponCodes: [String!]!
}

type Mutation {
    createStorefront(input: NewStorefront!): Storefront!
}
#Storefront schema end

#Order schema begin
type UserOrderInfo {
    name: String!
    address: String!
}

type Order {
    id: ID!
    customerInformation: UserOrderInfo!
    associatedStorefront: Storefront!
    couponCodes: [String!]!
}

input NewOrder {
    customerInfoName: String!
    customerInfoAdress: String!
    associatedStorefront: String!
    couponCodes: [String!]!
}

type Mutation {
    createOrder(input: NewOrder!): Order!
}

input CalculateOrderTotals {
    orderId: String!
}

type Query {
    calculateOrderTotals(input: CalculateOrderTotals!): Float!
}

#order data end